diff --git a/components/chart/settings/index.jsx b/components/chart/settings/index.jsx
index 7c10d0e..a89916e 100644
--- a/components/chart/settings/index.jsx
+++ b/components/chart/settings/index.jsx
@@ -4,12 +4,16 @@ import PropTypes from 'prop-types'
 import { Container, ToggleWrapper, ToggleInput, ToggleBtn } from './chart-settings.css'
 
 function ChartSettings(props) {
-  const { chartMode, onChartModeClick } = props
+  const { chartMode, onChartModeClick, onChartTimeClick, chartTime } = props
 
   const handleModeClick = (e) => {
     onChartModeClick(e.target.value)
   }
 
+  const handleTimeClick = (e) => {
+    onChartTimeClick(e.target.value)
+  }
+
   const renderTimeIntervals = () => {
     // @todo: should be handled in view and passed as props when supported
     return ['1m', '5m', '15m', '1h', '4h', '1d'].map((i) => (
@@ -18,11 +22,11 @@ function ChartSettings(props) {
           type="radio"
           id={`time-${i}`}
           value={i}
-          checked={i === '1d'}
-          onChange={() => null}
-          disabled={i !== '1d'}
+          checked={i === chartTime}
+          onChange={handleTimeClick}
+          disabled={i !== '1d' && i !== '4h'}
         />
-        <ToggleBtn as="label" size="small" htmlFor={`time-${i}`}>
+        <ToggleBtn as="label" size="small" htmlFor={`time-${i}`} >
           {i}
         </ToggleBtn>
       </React.Fragment>
@@ -60,7 +64,9 @@ function ChartSettings(props) {
 
 ChartSettings.propTypes = {
   chartMode: PropTypes.string,
-  onChartModeClick: PropTypes.func
+  chartTime: PropTypes.string,
+  onChartModeClick: PropTypes.func,
+  onChartTimeClick: PropTypes.func
 }
 
 export default ChartSettings
diff --git a/components/chart/view.jsx b/components/chart/view.jsx
index 0d00d5a..478f6c7 100644
--- a/components/chart/view.jsx
+++ b/components/chart/view.jsx
@@ -17,6 +17,7 @@ function ChartView(props) {
   const { areaChart } = useAreaChart(areaChartRef, priceData)
 
   const [chartMode, setChartMode] = useState('candle')
+  const [chartTime, setChartTime] = useState('1d')
 
   const changeMode = (mode) => {
     setChartMode(mode)
@@ -30,6 +31,23 @@ function ChartView(props) {
     }
   }
 
+  const changeTime = (time) => {
+    setChartTime(time);
+
+    console.log(time);
+    /*alert(time);*/
+    /*setChartMode(mode)
+
+    if (mode === 'candle') {
+      const logicalRange = areaChart?.timeScale().getVisibleLogicalRange()
+      candleChart?.timeScale().setVisibleLogicalRange(logicalRange)
+    } else {
+      const logicalRange = candleChart?.timeScale().getVisibleLogicalRange()
+      areaChart?.timeScale().setVisibleLogicalRange(logicalRange)
+    }*/
+  }
+
+
   return (
     <Container>
       <>
@@ -53,7 +71,10 @@ function ChartView(props) {
         volume={asaVolume}
       />
       <SettingsContainer>
-        <ChartSettings chartMode={chartMode} onChartModeClick={(mode) => changeMode(mode)} />
+        <ChartSettings chartMode={chartMode} chartTime={chartTime} 
+            onChartModeClick={(mode) => changeMode(mode)} 
+            onChartTimeClick={(time) => changeTime(time)} 
+        />
       </SettingsContainer>
     </Container>
   )
diff --git a/components/main-layout/index.jsx b/components/main-layout/index.jsx
index bcf5b74..751075e 100644
--- a/components/main-layout/index.jsx
+++ b/components/main-layout/index.jsx
@@ -35,7 +35,8 @@ const DEMO_ASSETS_DATA = demoAssetsData
 
 function MainLayout(props) {
   const { onWalletConnect, refetchWallets } = props
-
+  console.log('in main layout!!! env: ' + process.env.NEXT_PUBLIC_ENV );
+  
   const asset = useStore((state) => state.asset)
   const isSignedIn = useStore((state) => state.isSignedIn)
   const showOrderBook = asset.isTraded || asset.hasOrders
